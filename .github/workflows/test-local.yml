name: Local Testing with act

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: false
        default: 'basic'
        type: choice
        options:
          - basic
          - org-only
          - team-sync
          - error-conditions

permissions:
  contents: read

jobs:
  test-local-basic:
    name: Test Basic Functionality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Start Mock API Server
        run: |
          cd test-infrastructure/mock-api
          npm install
          npm start &
          sleep 5
          # Wait for server to be ready
          curl -f http://localhost:3001/health || exit 1
        continue-on-error: false

      - name: Test Action (Basic Scenario)
        id: test-basic
        uses: ./
        with:
          github_organization: copilot-chargeback-test
          github_team: engineering-team
          github_cost_center_name: engineering-cost-center
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || 'fake-token-for-testing' }}
          COST_CENTER_API_BASE_URL: http://localhost:3001

      - name: Verify Results
        run: |
          echo "Action result: ${{ steps.test-basic.outputs.result }}"
          # Add validation logic here

      - name: Stop Mock API Server
        if: always()
        run: |
          pkill -f "node.*mock-api" || true

  test-local-org-only:
    name: Test Organization-Only Sync
    runs-on: ubuntu-latest
    if:
      github.event.inputs.test_scenario == 'org-only' ||
      github.event.inputs.test_scenario == '' || github.event_name !=
      'workflow_dispatch'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Start Mock API Server
        run: |
          cd test-infrastructure/mock-api
          npm install
          npm start &
          sleep 5
          curl -f http://localhost:3001/health || exit 1

      - name: Test Action (Organization-Only)
        id: test-org-only
        uses: ./
        with:
          github_organization: copilot-chargeback-test
          # github_team: # Intentionally omitted
          github_cost_center_name: org-wide-cost-center
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || 'fake-token-for-testing' }}
          COST_CENTER_API_BASE_URL: http://localhost:3001

      - name: Verify Results
        run: |
          echo "Action result: ${{ steps.test-org-only.outputs.result }}"

      - name: Stop Mock API Server
        if: always()
        run: |
          pkill -f "node.*mock-api" || true

  test-local-error-conditions:
    name: Test Error Conditions
    runs-on: ubuntu-latest
    if:
      github.event.inputs.test_scenario == 'error-conditions' ||
      github.event.inputs.test_scenario == '' || github.event_name !=
      'workflow_dispatch'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Test Action (Invalid Token)
        id: test-invalid-token
        uses: ./
        continue-on-error: true
        with:
          github_organization: copilot-chargeback-test
          github_team: engineering-team
          github_cost_center_name: engineering-cost-center
        env:
          GITHUB_TOKEN: invalid-token
          COST_CENTER_API_BASE_URL: http://localhost:3001

      - name: Verify Error Handling
        run: |
          echo "Expected failure occurred: ${{ steps.test-invalid-token.outcome }}"
          if [ "${{ steps.test-invalid-token.outcome }}" != "failure" ]; then
            echo "Error: Expected action to fail with invalid token"
            exit 1
          fi
